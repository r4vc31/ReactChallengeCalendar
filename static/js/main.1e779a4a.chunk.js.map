{"version":3,"sources":["store/getStore.js","reducers/index.js","pages/App.js","components/CalendarGrid.jsx","utils.js","components/ReminderForm.jsx","components/RemindersList.jsx","pages/Calendar.js","routes/index.js","Main.js","reportWebVitals.js","index.js","sass/Calendar.module.scss"],"names":["initialState","middleware","thunk","composedEnhancers","compose","applyMiddleware","combineReducers","App","CalendarGrid","currentDate","reminders","selectedDay","onDayClick","firstDayOfMonth","Date","getFullYear","getMonth","daysInMonth","getDate","days","i","getDay","push","className","styles","currentDay","hasReminders","filter","reminder","date","toDateString","length","onClick","day","selected","grid","map","cities","mostrarMensaje","mensaje","divMensaje","document","createElement","textContent","setAttribute","body","appendChild","setTimeout","removeChild","normalizeDate","newDate","setDate","getWeatherForecast","city","a","fetch","toISOString","weatherResponse","json","weatherData","conditions","ReminderForm","onAddReminder","useState","newReminderText","setNewReminderText","newReminderDate","setNewReminderDate","newReminderTime","setNewReminderTime","newReminderCity","setNewReminderCity","weather","setWeather","useEffect","apiUrl","response","data","console","error","fetchWeather","type","maxLength","placeholder","value","onChange","e","target","trimmedText","slice","newReminder","time","text","RemindersList","editingReminder","editText","editDate","editTime","editCity","setEditingReminder","setEditText","setEditDate","setEditTime","setEditCity","handleSaveReminder","handleEditReminder","weatherForecasts","setWeatherForecasts","newForecasts","key","prev","remindersList","index","Calendar","Routes","path","component","setCurrentDate","setReminders","setSelectedDay","monthYear","toLocaleString","month","year","calendar","header","weekdays","originalReminder","withRouter","reducer","renderRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","reducers","createStore","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1e779a4a.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst initialState = {};\r\nconst enhancers = [];\r\nconst middleware = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  const devToolsExtension = window.devToolsExtension;\r\n\r\n  if (typeof devToolsExtension === \"function\") {\r\n    enhancers.push(devToolsExtension());\r\n  }\r\n}\r\n\r\nconst composedEnhancers = compose(applyMiddleware(...middleware), ...enhancers);\r\n\r\nexport default function getStore(reducer){\r\n  const store = createStore(reducer, initialState, composedEnhancers)\r\n  return store;\r\n}","import { combineReducers} from 'redux';\r\n\r\nconst reducers = {};\r\n\r\nexport default combineReducers(reducers);","import Readme from \"../components/Readme\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Readme />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport styles from \"../sass/Calendar.module.scss\";\r\n\r\nfunction CalendarGrid({ currentDate, reminders, selectedDay, onDayClick }) {\r\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n  const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n  const daysInMonth = lastDayOfMonth.getDate();\r\n\r\n  const days = [];\r\n\r\n  // Add empty cells for previous month's days\r\n  for (let i = 0; i < firstDayOfMonth.getDay(); i++) {\r\n    days.push(<div key={`empty-${i}`} className={styles[\"empty-day\"]}></div>);\r\n  }\r\n\r\n  // Add actual days of the current month\r\n  for (let i = 1; i <= daysInMonth; i++) {\r\n    const currentDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);\r\n    const remindersForDay = reminders.filter(\r\n      (reminder) => reminder.date.toDateString() === currentDay.toDateString()\r\n    );\r\n    const hasReminders = remindersForDay.length > 0;\r\n\r\n    days.push(\r\n      <div\r\n        key={i}\r\n        onClick={() => onDayClick(currentDay)}\r\n        className={`${styles.day} ${\r\n          selectedDay?.toDateString() === currentDay.toDateString() ? styles.selected : \"\"\r\n        } ${hasReminders ? styles.hasReminders : \"\"}`}\r\n      >\r\n        {i}\r\n        {hasReminders && <span className={styles[\"reminder-text\"]}>Has reminders</span>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div className={styles.grid}>{days.map((day) => day)}</div>;\r\n}\r\n\r\nexport default CalendarGrid;\r\n","export const cities = [\r\n    \"Azuay\", \"Bolívar\", \"Cañar\", \"Carchi\", \"Chimborazo\", \"Cotopaxi\",\r\n    \"El Oro\", \"Esmeraldas\", \"Galápagos\", \"Guayas\", \"Imbabura\", \"Loja\",\r\n    \"Los Ríos\", \"Manabí\", \"Morona Santiago\", \"Napo\", \"Orellana\", \"Pastaza\",\r\n    \"Pichincha\", \"Santa Elena\", \"Santo Domingo de los Tsáchilas\", \"Sucumbíos\", \"Tungurahua\", \"Zamora Chinchipe\"\r\n];\r\n\r\nexport function mostrarMensaje(mensaje) {\r\n    const divMensaje = document.createElement('div');\r\n    divMensaje.textContent = mensaje;\r\n    divMensaje.setAttribute(\"style\",\r\n        \" width: 50vw; margin: 0 auto; color: white; padding: 8px; text-align: center; font-size: 18px; font-weight: bold; background-color: red; border-radius: 25px;\");\r\n    document.body.appendChild(divMensaje);\r\n    setTimeout(() => {\r\n        document.body.removeChild(divMensaje);\r\n    }, 3000); // 3 seconds\r\n}\r\n\r\nexport const normalizeDate = (date) => {\r\n    const newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n    newDate.setDate(newDate.getDate() + 1);\r\n    return newDate;\r\n};\r\n\r\nexport const getWeatherForecast = async (city, date) => {\r\n    const weatherResponse = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${city}/${date.toISOString()}?key=FRFPMDB8VFDFZTPME23QVBYP7`);\r\n    const weatherData = await weatherResponse.json();\r\n    return weatherData?.days[0].conditions || \"Unknown\";\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport styles from '../sass/Calendar.module.scss';\r\nimport { getWeatherForecast } from '../utils'; \r\n\r\nfunction ReminderForm({ onAddReminder, mostrarMensaje, cities, normalizeDate }) {\r\n  const [newReminderText, setNewReminderText] = useState('');\r\n  const [newReminderDate, setNewReminderDate] = useState(new Date());\r\n  const [newReminderTime, setNewReminderTime] = useState('');\r\n  const [newReminderCity, setNewReminderCity] = useState('');\r\n  const [weather, setWeather] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch weather only when both city and date are selected\r\n    if (newReminderCity && newReminderDate) {\r\n      const fetchWeather = async () => {\r\n        const apiUrl = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${newReminderCity}/${newReminderDate.toISOString()}?key=FRFPMDB8VFDFZTPME23QVBYP7`;\r\n\r\n        try {\r\n          const response = await fetch(apiUrl);\r\n          const data = await response.json();\r\n          setWeather(data.days[0]?.conditions); // Get conditions for the selected day\r\n        } catch (error) {\r\n          console.error('Error fetching weather:', error);\r\n          setWeather('Error fetching weather');\r\n        }\r\n      };\r\n      fetchWeather();\r\n    } else {\r\n      setWeather(null); // Clear weather if city or date is not selected\r\n    }\r\n  }, [newReminderCity, newReminderDate]); // Fetch whenever city or date changes\r\n\r\n  const handleAddReminder = () => {\r\n    // 1. Validate input (ensure date, time, city, and text are filled)\r\n    if (!newReminderText || !newReminderDate || !newReminderTime || !newReminderCity) {\r\n      mostrarMensaje(\"¡Campos Incompletos!\");\r\n      return;\r\n    }\r\n\r\n    // 2. Trim reminder text to max 30 characters\r\n    const trimmedText = newReminderText.slice(0, 30);\r\n\r\n    // 3. Create new reminder object\r\n    const newReminder = {\r\n      date: normalizeDate(newReminderDate),\r\n      time: newReminderTime,\r\n      city: newReminderCity,\r\n      text: trimmedText\r\n    };\r\n\r\n    // 4. Call the onAddReminder prop to pass the new reminder to the parent component\r\n    onAddReminder(newReminder);\r\n\r\n    // 5. Clear input fields\r\n    setNewReminderText('');\r\n    setNewReminderDate(new Date());\r\n    setNewReminderTime('');\r\n    setNewReminderCity('');\r\n    setWeather(null); // Clear weather as well\r\n  };\r\n\r\n  return (\r\n    <div className={styles[\"reminder-form\"]}>\r\n      <input\r\n        type=\"text\"\r\n        maxLength=\"30\"\r\n        placeholder=\"Reminder\"\r\n        value={newReminderText}\r\n        onChange={(e) => setNewReminderText(e.target.value)}\r\n      />\r\n      <input\r\n        type=\"date\"\r\n        onChange={(e) => setNewReminderDate(new Date(e.target.value))}\r\n      />\r\n      <input\r\n        type=\"time\"\r\n        value={newReminderTime}\r\n        onChange={(e) => setNewReminderTime(e.target.value)}\r\n      />\r\n      <select\r\n        value={newReminderCity}\r\n        onChange={(e) => setNewReminderCity(e.target.value)}\r\n      >\r\n        <option value=\"\">Select City</option>\r\n        {cities.map((city) => (\r\n          <option key={city} value={city}>\r\n            {city}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {weather && (\r\n        <div className={styles.weather}>\r\n          Weather for {newReminderCity} on {normalizeDate(newReminderDate).toDateString()}: {weather}\r\n        </div>\r\n      )}\r\n      <button onClick={handleAddReminder}>Add Reminder</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReminderForm;","import React, { useEffect, useState } from 'react';\r\nimport styles from '../sass/Calendar.module.scss';\r\nimport { getWeatherForecast } from '../utils';\r\n\r\nfunction RemindersList({\r\n    selectedDay, reminders, editingReminder, editText, editDate, editTime, editCity,\r\n    setEditingReminder, setEditText, setEditDate, setEditTime, setEditCity, handleSaveReminder, handleEditReminder, cities\r\n}) {\r\n\r\n    const [weatherForecasts, setWeatherForecasts] = useState({}); // State for storing weather forecasts\r\n\r\n    useEffect(() => {\r\n        const fetchWeather = async () => {\r\n            const newForecasts = {};\r\n            for (const reminder of reminders) {\r\n                const key = `${reminder.date.toDateString()}-${reminder.city}`;\r\n                if (!weatherForecasts[key]) {\r\n                    newForecasts[key] = await getWeatherForecast(reminder.city, reminder.date);\r\n                }\r\n            }\r\n            setWeatherForecasts((prev) => ({ ...prev, ...newForecasts }));\r\n        };\r\n        fetchWeather();\r\n    }, [reminders, weatherForecasts]); // Fetch weather when reminders change\r\n\r\n    return (\r\n        <div className={styles.remindersList}>\r\n            <h3>Reminders for {selectedDay.toDateString()}:</h3>\r\n            <ul>\r\n                {reminders\r\n                    .filter(reminder => reminder.date.toDateString() === selectedDay.toDateString())\r\n                    .map((reminder, index) => (\r\n                        <li key={index}>\r\n                            {editingReminder === reminder ? (\r\n                                <div>\r\n                                    {/* Edit Form */}\r\n                                    <input type=\"text\" value={editText} onChange={(e) => setEditText(e.target.value)} />\r\n                                    <input type=\"date\" value={editDate.toISOString().slice(0, 10)} onChange={(e) => setEditDate(new Date(e.target.value))} />\r\n                                    <input type=\"time\" value={editTime} onChange={(e) => setEditTime(e.target.value)} />\r\n                                    <select value={editCity} onChange={(e) => setEditCity(e.target.value)}>\r\n                                        <option value=\"\">Select City</option>\r\n                                        {cities.map(city => (\r\n                                            <option key={city} value={city}>{city}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                    <button onClick={() => handleSaveReminder(reminder)}>Save</button>\r\n                                    <button onClick={() => setEditingReminder(null)}>Cancel</button>\r\n                                </div>\r\n                            ) : (\r\n                                <div>\r\n                                    {/* Display Reminder */}\r\n                                    {reminder.time} - {reminder.text} ({reminder.city})\r\n                                    {' - '}\r\n                                    {weatherForecasts[`${reminder.date.toDateString()}-${reminder.city}`] || 'Loading...'}\r\n                                    <button onClick={() => handleEditReminder(reminder)}>Edit</button>\r\n                                </div>\r\n                            )}\r\n                        </li>\r\n                    ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RemindersList;","import React, { useState } from \"react\";\r\nimport styles from \"../sass/Calendar.module.scss\";\r\nimport CalendarGrid from \"../components/CalendarGrid\";\r\nimport ReminderForm from \"../components/ReminderForm\";\r\nimport RemindersList from \"../components/RemindersList\";\r\nimport { cities, normalizeDate, mostrarMensaje, getWeatherForecast } from '../utils';\r\n\r\nfunction Calendar() {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [reminders, setReminders] = useState([]);\r\n  const [selectedDay, setSelectedDay] = useState(null);\r\n\r\n  const [editingReminder, setEditingReminder] = useState(null);\r\n  const [editText, setEditText] = useState('');\r\n  const [editDate, setEditDate] = useState(new Date());\r\n  const [editTime, setEditTime] = useState('');\r\n  const [editCity, setEditCity] = useState('');\r\n\r\n\r\n  const handleAddReminder = (newReminder) => {\r\n    setReminders([...reminders, newReminder]);\r\n  };\r\n\r\n  const handleEditReminder = (reminder) => {\r\n    setEditingReminder(reminder);\r\n    setEditText(reminder.text);\r\n    setEditDate(reminder.date);\r\n    setEditTime(reminder.time);\r\n    setEditCity(reminder.city);\r\n  };\r\n\r\n  const handleSaveReminder = (originalReminder) => {\r\n    // 1. Update reminders state\r\n    setReminders(\r\n      reminders.map((reminder) =>\r\n        reminder === originalReminder\r\n          ? {\r\n            ...reminder,\r\n            date: normalizeDate(editDate),\r\n            time: editTime,\r\n            city: editCity,\r\n            text: editText\r\n          }\r\n          : reminder\r\n      )\r\n    );\r\n\r\n    // 2. Clear editing state\r\n    setEditingReminder(null);\r\n    setEditText(\"\");\r\n    setEditDate(new Date());\r\n    setEditTime(\"\");\r\n    setEditCity(\"\");\r\n  };\r\n\r\n  const handleDayClick = (day) => {\r\n    setSelectedDay(selectedDay?.toDateString() === day.toDateString() ? null : day);\r\n  };\r\n\r\n  // Navigation functions (prev/next month)\r\n  const handlePrevMonth = () => {\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() - 1)\r\n    );\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentDate(\r\n      new Date(currentDate.getFullYear(), currentDate.getMonth() + 1)\r\n    );\r\n  };\r\n\r\n  const monthYear = currentDate.toLocaleString(\"default\", { month: \"long\", year: \"numeric\" });\r\n  const daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  return (\r\n    <div className={styles.calendar}>\r\n      <div className={styles.header}>\r\n        <button onClick={handlePrevMonth}>&lt;</button>\r\n        <h2>{monthYear}</h2>\r\n        <button onClick={handleNextMonth}>&gt;</button>\r\n      </div>\r\n      <div className={styles.weekdays}>{daysOfWeek.map(day => <div key={day}>{day}</div>)}</div>\r\n      <CalendarGrid\r\n        currentDate={currentDate}\r\n        reminders={reminders}\r\n        selectedDay={selectedDay}\r\n        onDayClick={handleDayClick}\r\n      />\r\n      <ReminderForm onAddReminder={handleAddReminder} mostrarMensaje={mostrarMensaje} cities={cities} normalizeDate={normalizeDate} />\r\n      {selectedDay && (\r\n        <RemindersList\r\n          selectedDay={selectedDay}\r\n          reminders={reminders}\r\n          editingReminder={editingReminder}\r\n          editText={editText}\r\n          editDate={editDate}\r\n          editTime={editTime}\r\n          editCity={editCity}\r\n          setEditingReminder={setEditingReminder}\r\n          setEditText={setEditText}\r\n          setEditDate={setEditDate}\r\n          setEditTime={setEditTime}\r\n          setEditCity={setEditCity}\r\n          handleSaveReminder={handleSaveReminder}\r\n          cities={cities}\r\n          getWeatherForecast={getWeatherForecast}\r\n          handleEditReminder={handleEditReminder}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","import App from '../pages/App';\r\nimport Calendar from '../pages/Calendar';\r\n\r\nconst Routes = [\r\n  {\r\n    path: '/',\r\n    component: Calendar\r\n  }\r\n];\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { renderRoutes } from 'react-router-config';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Routes from './routes';\r\n\r\nfunction Main() {\r\n\treturn (\r\n\t  <div className=\"main\">\r\n\t    {renderRoutes(Routes)}\r\n\t  </div>\r\n\t);\r\n}\r\n\r\nexport default withRouter(Main);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider as ReduxProvider } from \"react-redux\";\r\nimport getStore from \"./store/getStore\";\r\nimport reducers from './reducers';\r\nimport Main from './Main';\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\n\r\n// import main sass file\r\nimport \"./sass/app.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReduxProvider store={getStore(reducers)}>\r\n\t    <BrowserRouter>\r\n\t      <Main />\r\n\t    </BrowserRouter>\r\n    </ReduxProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendar\":\"Calendar_calendar__z0c8Q\",\"header\":\"Calendar_header__2zkCG\",\"weekdays\":\"Calendar_weekdays__2WNlk\",\"grid\":\"Calendar_grid__3VmLs\",\"day\":\"Calendar_day__2Z_Tf\",\"empty-day\":\"Calendar_empty-day__1vikq\",\"today\":\"Calendar_today__2bhcs\",\"reminders-container\":\"Calendar_reminders-container__39Vgv\",\"reminder\":\"Calendar_reminder__2tlAl\",\"message\":\"Calendar_message__1_sBg\",\"reminder-form\":\"Calendar_reminder-form__t8vjP\",\"reminder-text\":\"Calendar_reminder-text__2aInG\",\"selected\":\"Calendar_selected__y6Zp6\",\"remindersList\":\"Calendar_remindersList__2ufnr\"};"],"sourceRoot":""}